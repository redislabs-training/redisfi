{% extends 'base.jinja' %}
{% block header %}
<style type="text/css">
    .container-main{
        margin-top: 20px;
        margin-left: 10px;
    }
    .container-data{
        margin-top: 30px;
        width: 95%;
    }
    .link-dark { color: #5961FF; text-decoration: none; }
    .table-striped>tbody>tr:nth-of-type(odd)>* { --bs-table-accent-bg: #E9EBFD; }
    .table-hover>tbody>tr:hover>* { --bs-table-accent-bg: #D2D7FE; }
    h1 {color:#fff;}
</style>
{% endblock %}
{% block nav %}
<ul class="navbar-nav me-auto mb-2 mb-lg-0">
    <li class="nav-item">
        <a class="nav-link active" aria-current="page" href="/overview">Accounts</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="/research">Research</a>
    </li>
</ul>
<form class="d-flex" action="/search">
    <input class="form-control me-2" type="search" name="query" placeholder="Search" aria-label="Search">
    <button class="btn btn-outline-success" type="submit">Search</button>
</form>
<div>&nbsp;</div>
{% endblock %}
{% block body %}
<div class="container-fluid container-main">
    <h1>Results</h1>
    <div class="container-fluid container-data">
        <div class="row">
            <div class="col-lg">
                <table class="table table-striped table-hover border bg-light">
                    <thead>
                      <tr>
                        <th scope="col">Symbol</th>
                        <th scope="col">Name</th>
                        <th scope="col">Description</th>
                        <th scope="col">Price</th>
                      </tr>
                    </thead>
                    <tbody>
                      {% for asset in results %}
                        <tr>
                            <th scope="row">&nbsp;&nbsp;<a class="link-dark" href="/asset/{{asset.symbol}}">{{asset.symbol}}</a></th>
                            <td>{{asset.name}}</td>
                            <td><span class="description" id="{{asset.symbol}}-description">{{asset.description}}</span> <a id="{{asset.symbol}}-description-toggle" class="dark-link text-muted" href="#" onclick="expandDescription('{{asset.symbol}}-description')">Read More</a></td>
                            <td><span class="price" id="{{asset.symbol}}-price">{{'$' + "{:,.2f}".format(asset.price.mock or asset.price.live or asset.price.historic)}}</span></td>
                        </tr>
                      {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
{% endblock %}
{% block js %}
<script type="text/javascript">
    const TRUNCATED_WORD_LENGTH = 20;
    const fullDescriptions = {};

    function collapseDescription(id) {
        const selector = `#${id}`;

        $(selector).text(truncateDescription($(selector).text()));
        const toggleSelector = selector + '-toggle';
        $(toggleSelector).text('Read More')
        $(toggleSelector).attr('onclick', `expandDescription('${id}')`)

    }
    
    function expandDescription(id) {
        const [symbol, _] = id.split('-');
        const selector = `#${id}`;
        $(selector).text(fullDescriptions[symbol]);
        
        const toggleSelector = selector + '-toggle';
        $(toggleSelector).text('Read Less');
        $(toggleSelector).attr('onclick', `collapseDescription('${id}')`);
    }

    function truncateDescription(description) {          
        let splitDescription = description.split(' ');
        let subset = splitDescription.slice(0, TRUNCATED_WORD_LENGTH);

        return subset.join(' ');
    }

    $(() => {
        
        const descriptions = $('.description');
        for (let i=0; i<descriptions.length; i++) {
            const [symbol, _] = descriptions[i].id.split('-');
            fullDescriptions[symbol] = descriptions[i].innerText;
            descriptions[i].innerText = truncateDescription(descriptions[i].innerText);
        }

        const assets = $('.price');
        const prices = {};
        const socket = io();
        for (let i=0; i < assets.length; i++) {
            const price = parseFloat(assets[i].textContent.replace(/,/g, ''));
            const [symbol, _] = assets[i].id.split('-');
            prices[symbol] = price;
            socket.on('updates.'+symbol, (data) => {
                let selector = `#${assets[i].id}`;
                if (data.price > prices[symbol]) {
                    flashColorAndUpdateNumber(selector, GREEN_COLOR, 'black', data.price);
                } else if (data.price < prices[symbol]) {
                    flashColorAndUpdateNumber(selector, RED_COLOR, 'black', data.price);
                }
                prices[symbol] = data.price;
            });
        }
    });
</script>
{% endblock %}