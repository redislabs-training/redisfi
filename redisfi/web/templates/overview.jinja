{% extends 'base.jinja' %}
{% block header %}
<style type="text/css">
    .container-main{
        margin-top: 20px;
        margin-left: 10px;
    }
    .container-data{
        margin-top: 30px;
        width: 99%;
    }
    h1, h2, .balance, #price, .summary { color: #fff; }
    .table-striped>tbody>tr:nth-of-type(odd)>* { --bs-table-accent-bg: #E9EBFD; }
    .table-hover>tbody>tr:hover>* { --bs-table-accent-bg: #D2D7FE; }
    .brand-red { color: #DC382C; }
    h1 { margin-bottom: 25px; text-align: center; }
    .summary { font-size: 2rem; margin-bottom: 25px; }
</style>
{% endblock %}
{% block nav %}
<ul class="navbar-nav me-auto mb-2 mb-lg-0">
    <li class="nav-item">
        <a class="nav-link active" aria-current="page" href="/overview">Accounts</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="/research">Research</a>
    </li>
</ul>
<form class="d-flex" action="/search">
    <input class="form-control me-2" type="search" name="query" placeholder="Search" aria-label="Search">
    <button class="btn btn-outline-success" type="submit">Search</button>
</form>
<div>&nbsp;</div>
{% endblock %}
{% block body %}
<div class="container-fluid container-main">
    <h1>Welcome back, <span class="brand-red">Ed</span></h1>
    <div class="container-fluid container-data">
        <div class="row summary">
            <h2>My Portfolio</h2>
            <div class="col-8">
                Balance:&nbsp;&nbsp;<span id="balance">{{ '$' + "{:,.2f}".format(portfolio.balance) }}</span>
            </div>
        </div>
        <div class="row">
            <div class="col-md border bg-light">
                    <h4 class="p-3 text-center"><a class="link-dark" href="/fund/{{portfolio.retire.id}}">Retirement</a> - $<span class="price" id="401k-price">{{ "{:,.2f}".format(portfolio.retire.value) }}</span></h4>
                    <div class="chart" id="chart-401k"></div>
            </div>
            <div class="col-md border bg-light">
                <h4 class="p-3 text-center">Crypto</h4>
                <div class="chart" id="chart-crypto"></div>
                <table class="table table-striped table-hover bg-light">
                    <thead>
                      <tr>
                        <th scope="col">Symbol</th>
                        <th scope="col">Coins Owned</th>
                        <th scope="col">Price</th>
                        <th scope="col">1 day change</th>
                      </tr>
                    </thead>
                    <tbody>
                      {% for symbol, shares_owned in portfolio.crypto.items() %}
                        <tr>
                            <th scope="row">&nbsp;&nbsp;<a class="link-dark crypto" href="/asset/{{symbol}}">{{symbol}}</a></th>
                            <td id="{{symbol}}-sharesOwned">{{shares_owned}}</td>
                            <td><span class="price text-center" id="{{symbol}}-price">{{ '$'+"{:,.2f}".format(portfolio.price[symbol].live or portfolio.price[symbol].mock or portfolio.price[symbol].historic) }}</span></td>
                            <td>{{ '%0.2f' | format(portfolio.price[symbol].percent_change) }}%</td>
                        </tr>
                      {% endfor %}
                    </tbody>
                </table> 
            </div>
        </div>
        <div class="row">
            <div class="col-md border bg-light">
                <h4 class="p-3 text-center">Stocks</h4>
                <div class="chart" id="chart-stock"></div>
            </div>
            
            <div class="col-md border bg-light">
                <h4 class="p-3 text-center">Long Term Investments</h4>
                <div class="chart" id="chart-etf"></div>
            </div>
        </div>
    </div>
</div>
<div class="hidden" id="401k-sharesOwned">1</div>
{% for symbol, shares_owned in portfolio.stocks.items() %}
    <div class="invisible">    
        <div class="hidden stock">{{symbol}}</div>
        <div class="hidden price" id="{{symbol}}-price">{{ portfolio.price[symbol].live or portfolio.price[symbol].mock or portfolio.price[symbol].historic }}</div>
        <div class="hidden" id="{{symbol}}-sharesOwned">{{shares_owned}}</div>
    </div>
{% endfor %}
{% for symbol, shares_owned in portfolio.etfs.items() %}
    <div class="invisible">
        <div class="hidden etf">{{symbol}}</div>
        <div class="hidden price" id="{{symbol}}-price">{{ portfolio.price[symbol].live or portfolio.price[symbol].mock or portfolio.price[symbol].historic }}</div>
        <div class="hidden" id="{{symbol}}-sharesOwned">{{shares_owned}}</div>
    </div>
{% endfor %}
{% endblock %}
{% block js %}
<script type="text/javascript">
    const charts = {};
    const prices = {};
    const symbols = [];
    let lastBalance = 0;
    
    function sumPricesAndUpdateBalance() {
        let sum = 0;
        
        symbols.forEach((symbol) => {
            const sharesOwned = parseFloat($(`#${symbol}-sharesOwned`).text());
            sum = sharesOwned * prices[symbol] + sum;
        });

        if (sum > lastBalance) {
            flashColorAndUpdateNumber('#balance', GREEN_COLOR, 'white', sum);
        } else if(lastBalance > sum) {
            flashColorAndUpdateNumber('#balance', RED_COLOR, 'white', sum);
        }

        lastBalance = sum;
    }

    function unpackPromisesAndUpdateSeries(promises, chart) {
        Promise.all(promises).then((series) => {
            chart.updateSeries(series);
        });
    }

  function setChart(chart, chartSymbols, type) { 

    if (type === '401k') {
        $.getJSON('/api/fund/{{account}}/{{portfolio.retire.id}}/value', (data) => {
            let seriesData = []
            data.forEach((item) => {
                seriesData.push([item[0] * 1000, parseFloat(item[1].toFixed(2))]);
            })
            let series = [{name: '{{portfolio.retire.name}}', data:seriesData}];
            chart.updateSeries(series);
        })
    } else {
        const promises = [];

        chartSymbols.forEach((symbol) => {
            promises.push($.getJSON(`/api/asset/${symbol}/history?start={{day}}`).then((data) => {
                const barsPriceData  = barsToTimeseries(data);
                return {name:symbol, data:barsPriceData};
            }));
        });

        unpackPromisesAndUpdateSeries(promises, chart);
    }
    
  }

    $(() => {
        const socket = io();
        const rawCharts = $('.chart');
        chartOptions.chart.height = '400px';
        chartOptions.chart.width = '95%';
        for(let i=0; i<rawCharts.length; i++) {
            
            const chart = new ApexCharts(rawCharts[i], chartOptions);
            chart.render();
            const [_, which] = rawCharts[i].id.split('-');
            charts[which] = chart;
            const chartSymbolLinks = $(`.${which}`);
            const chartSymbols = []
            for (let i=0; i<chartSymbolLinks.length; i++) {
                chartSymbols.push(chartSymbolLinks[i].textContent)
            }
            setChart(chart, chartSymbols, which);
        }

        const assets = $('.price');

        for (let i=0; i < assets.length; i++) {
            let price = parseFloat(assets[i].textContent.replace(/,/g, ''));
            //assets[i].textContent = price.toFixed(2);
            let [symbol, _] = assets[i].id.split('-');
            symbols.push(symbol);
            prices[symbol] = price;

            socket.on('updates.'+symbol, (data) => {
                //assets[i].textContent = data.price.toFixed(2);
                let selector = `#${assets[i].id}`;

                if (data.price > prices[symbol]) {
                    flashColorAndUpdateNumber(selector, GREEN_COLOR, 'black', data.price);
                } else if (data.price < prices[symbol]) {
                    flashColorAndUpdateNumber(selector, RED_COLOR, 'black', data.price);
                }

                prices[symbol] = data.price;
                sumPricesAndUpdateBalance();
            });
        }
    });
</script>
{% endblock %}