{% extends 'base.jinja' %}
{% block header %}
<style type="text/css">
    .container-main{
        margin-top: 20px;
        margin-left: 10px;
    }
    .container-data{
        margin-top: 30px;
        width: 99%;
    }
    h1, h2, .balance, #price, .summary { color: #fff; }
    .table-striped>tbody>tr:nth-of-type(odd)>* { --bs-table-accent-bg: #E9EBFD; }
    .table-hover>tbody>tr:hover>* { --bs-table-accent-bg: #D2D7FE; }
    h1 { margin-bottom: 25px; text-align: center; }
    .summary { font-size: 2rem; margin-bottom: 25px; }
</style>
{% endblock %}
{% block nav %}
{% if VSS %}
    <ul class="navbar-nav me-auto mb-2 mb-lg-0">
        <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="/overview">Accounts</a>
        </li>

            <li class="nav-item">
                <a class="nav-link" href="/research/">Research</a>
            </li>
        
    </ul>
{% endif %}
<ul class="navbar-nav ms-auto">
    <form class="d-flex" action="/search">
        <input class="form-control me-2" type="search" name="query" placeholder="Search" aria-label="Search">
        <button class="btn btn-outline-success" type="submit">Search</button>
    </form>
    &nbsp;&nbsp;
    <li class="nav-item">
        <a class="nav-link active" data-bs-toggle="offcanvas" href="#commandsView" aria-controls="commandsView"><i class="bi bi-terminal"></i></a>
    </li>
</ul>
<div>&nbsp;</div>
{% endblock %}
{% block body %}
<div class="container-fluid container-main">
    <h1>Welcome back!</h1>
    <div class="container-fluid container-data">
        <div class="row summary">
            <h2>My Portfolio</h2>
            <div class="col-8">
                Balance:&nbsp;&nbsp;<span id="balance">{{ '$' + "{:,.2f}".format(portfolio.balance) }}</span>
            </div>
        </div>
        <div class="row">
            <div class="col-md border bg-light">
                    <h4 class="p-3 text-center"><a class="link-dark" href="/component/retire">Retirement</a> - <span id="retire-balance">{{'$' + "{:,.2f}".format(portfolio.components.retire.value) }}</span></h4>
                    <div class="chart" id="chart-retire"></div>
            </div>
            <div class="col-md border bg-light">
                <h4 class="p-3 text-center"><a class="link-dark" href="/component/crypto">Crypto</a> - <span id="crypto-balance">{{ '$' + "{:,.2f}".format(portfolio.components.crypto.value) }}</span></h4>
                <div class="chart" id="chart-crypto"></div>
            </div>
        </div>
        <div class="row">
            <div class="col-md border bg-light">
                <h4 class="p-3 text-center"><a class="link-dark" href="/component/stocks">Stocks</a> - <span id="stocks-balance">{{ '$' + "{:,.2f}".format(portfolio.components.stocks.value) }}</span></h4>
                <div class="chart" id="chart-stocks"></div>
            </div>
            <div class="col-md border bg-light">
                <h4 class="p-3 text-center"><a class="link-dark" href="/component/etfs">Long Term Investments</a> - <span id="etfs-balance">{{ '$' + "{:,.2f}".format(portfolio.components.etfs.value) }}</span></h4>
                <div class="chart" id="chart-etfs"></div>
            </div>
        </div>
    </div>
</div>
<div class="invisible">
    {% for component_name, component in portfolio.components.items() %}
            {% for asset in component.assets.values() %}
                <div class="hidden {{component_name}}">{{asset.symbol}}</div>
                <div class="hidden price" id="{{component_name}}-{{asset.symbol}}-price">{{ asset.price.live or asset.price.mock or asset.price.historic }}</div>
                <div class="hidden" id="{{asset.symbol}}-sharesOwned">{{asset.last_transaction.balance}}</div>
            {% endfor %}
    {% endfor %}
</div>
{% endblock %}
{% block js %}
<script type="text/javascript">
    const charts = {};
    const prices = {};
    const symbols = {};
    const kinds = ['retire', 'stocks', 'crypto', 'etfs']
    const balances = {};
    kinds.forEach((kind) => {
        balances[kind] = 0
    })
    let grandTotal = 0;
    
    function sumPricesAndUpdateBalance() {
        let sum = 0;
        kinds.forEach((kind) => {
            let subtotal = 0;
            symbols[kind].forEach((symbol) => {
                const sharesOwned = parseFloat($(`#${symbol}-sharesOwned`).text());
                subtotal = (sharesOwned * prices[symbol]) + subtotal;
                {# console.log(`IN AGG: component: ${kind} sharesOwned: ${sharesOwned} symbol: ${symbol} price: ${prices[symbol]}`) #}
            });
            
            if (subtotal.toFixed(2) != balances[kind].toFixed(2)){
                if  (subtotal > balances[kind]) { flashColorAndUpdateNumber(`#${kind}-balance`, GREEN_COLOR, 'black', subtotal) }
                else { flashColorAndUpdateNumber(`#${kind}-balance`, RED_COLOR, 'black', subtotal) }
            }
            {# console.log(`SUB AGG: component: ${kind} subtotal: ${subtotal}`) #}
            balances[kind] = subtotal;
            sum = subtotal + sum;
        });

        if (sum > grandTotal) {
            flashColorAndUpdateNumber('#balance', GREEN_COLOR, 'white', sum);
        } else if(grandTotal > sum) {
            flashColorAndUpdateNumber('#balance', RED_COLOR, 'white', sum);
        }

        grandTotal = sum;
    }

    function unpackPromisesAndUpdateSeries(promises, chart) {
        Promise.all(promises).then((series) => {
            chart.updateSeries(series);
        });
    }

  function setChart(chart, chartSymbols, type) { 
    $.getJSON(`/api/component/{{account}}/${type}/value?log_guid={{log_guid}}`, (data) => {
        let seriesData = []
        data.forEach((item) => {
            seriesData.push([item[0] * 1000, parseFloat(item[1].toFixed(2))]);
        })
        let series = [{name: `${type.charAt(0).toUpperCase()}${type.substring(1)}`, data:seriesData}];
        chart.updateSeries(series);
    })
  }

    $(() => {
        const socket = io();
        const rawCharts = $('.chart');
        chartOptions.chart.height = '400px';
        chartOptions.chart.width = '95%';
        for(let i=0; i<rawCharts.length; i++) {
            
            const chart = new ApexCharts(rawCharts[i], chartOptions);
            chart.render();
            const [_, which] = rawCharts[i].id.split('-');
            charts[which] = chart;
            const chartSymbolLinks = $(`.${which}`);
            const chartSymbols = []
            for (let i=0; i<chartSymbolLinks.length; i++) {
                chartSymbols.push(chartSymbolLinks[i].textContent)
            }
            symbols[which] = chartSymbols;
            setChart(chart, chartSymbols, which);
        }

        const assets = $('.price');

        for (let i=0; i < assets.length; i++) {
            let price = parseFloat(assets[i].textContent.replace(/,/g, ''));
            const [component, symbol, _] = assets[i].id.split('-');
            prices[symbol] = price;
            {# console.log(`ORIGINAL: component: ${component} symbol: ${symbol} price: ${price}`) #}
            socket.on('updates.'+symbol, (data) => {
                let selector = `#${assets[i].id}`;
                flashColorAndUpdateNumber(selector, 'black', 'black', data.price);
                prices[symbol] = data.price;
                {# console.log(`UPDATE: symbol: ${symbol} price: ${data.price}`) #}
                sumPricesAndUpdateBalance();
            });
        }
        populateRedisCommands('{{log_guid}}');   
    });
</script>
{% endblock %}