{% extends 'base.jinja' %}
{% block header %}
<style type="text/css">
    .container-main{
        margin-top: 20px;
        margin-left: 10px;
    }
    .container-data{
        margin-top: 30px;
        width: 95%;
    }
     h1, .summary { color: #fff; }
    h1 { margin-bottom: 25px; text-align: center; }
    .summary { font-size: 2rem; margin-bottom: 25px; }
    .plan { text-align: right; }
    .brand-red { color: #DC382C; }
    .link-dark { color: #5961FF; text-decoration: none; }
    .table-striped>tbody>tr:nth-of-type(odd)>* { --bs-table-accent-bg: #E9EBFD; }
    .table-hover>tbody>tr:hover>* { --bs-table-accent-bg: #D2D7FE; }
</style>
{% endblock %}
{% block body %}
<div class="container-fluid container-main">
    <div class="container-fluid container-data">
            <div class="row summary">
            <div class="col-8">
                Balance:&nbsp;&nbsp;<span id="balance"></span>
            </div>
            <div class="col-4 plan">
                Plan: {{fund.name}}
            </div>
        </div>
        <div class="row">
            <div class="col-lg">
                <div class="timeframe-selector">
                    <select id="timeselector" class="form-select-sm" onchange="chartUpdate()" aria-label="Timeframe">
                        <option value="{{thirty}}">30 days</option>
                        <option value="{{ninty}}">90 days</option>
                        <option value="{{year}}">1 year</option>
                        <option selected value="0">All</option>
                    </select>
                </div>
                <p>&nbsp;</p>
                <div class="border bg-light" id="chart"></div>
            </div>
        </div>
        <div class="row"><div class="col-lg spacer">&nbsp;</div></div>
        <div class="row">
            <div class="col-lg">
                <table class="table table-striped table-hover border bg-light">
                    <thead>
                      <tr>
                        <th scope="col">Symbol</th>
                        <th scope="col">Name</th>
                        <th scope="col">Shares Owned</th>
                        <th scope="col">Price</th>
                        <th scope="col">Change</th>
                      </tr>
                    </thead>
                    <tbody>
                      {% for asset in fund.assets.values() %}
                        <tr>
                            <th scope="row">&nbsp;&nbsp;<a class="link-dark" href="/asset/{{asset.symbol}}">{{asset.symbol}}</a></th>
                            <td>{{asset.name}}</td>
                            <td id="{{asset.symbol}}-sharesOwned">{{'%0.2f' | format(asset.last_transaction.balance)}}</td>
                            <td>$ <span class="price" id="{{asset.symbol}}-price">{{ asset.price.live or asset.price.mock or asset.price.historic }}</span></td>
                            <td style="{% if asset.growth_percent > 100 %}color: ForestGreen;{% elif asset.growth_percent < 100 %} color: red;{% endif %}">{{ '%0.2f' | format(asset.growth_percent) }} % </td>
                        </tr>
                      {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row"><div class="col-lg spacer">&nbsp;</div></div>
        <div class="row">
            <div class="col-md">
                <div class="p-4 border bg-light" id="description">
                    <h5>Description:</h5><hr>
                    {{ fund.description }}
                </div>
            </div> 
        </div>
    </div>
</div>
{% endblock %}
{% block js %}
<script type="text/javascript">
    const prices = {};
    const symbols = [];
    chartOptions.chart.height = '400px';
    const chart = new ApexCharts(document.querySelector("#chart"), chartOptions);
    const trades = {};

    let live = false;
    let shares = 0;
    let lastTimestamp = 0;
    let lastBalance = 0;

    function unpackPromisesAndUpdateSeries(promises) {
        Promise.all(promises).then((series) => {
            console.log(series);
            chart.updateSeries(series);
        });
    }

  function setChartTimeframe(timeframe) { 
    const promises = [];

    symbols.forEach((symbol) => {
        let url;
        if (parseInt(timeframe) === 0) {
            url = `/api/account/{{account}}/transactions?symbol=${symbol}`;
        } else {
            url = `/api/account/{{account}}/value/${symbol}?start=${timeframe}`;
        }

        promises.push($.getJSON(url).then((data) => {
        
            const transactions = [];
            for (let i=0; i<data.length; i++) {
                let timestamp = data[i].timestamp * 1000;
                let value;

                if (parseInt(timeframe) === 0) {
                    value = parseFloat((data[i].balance * data[i].price).toFixed(2));
                } else {
                    value = parseFloat((data[i].value).toFixed(2));
                }

                transactions.push([timestamp, value]);
                
                if (lastTimestamp < timestamp) {
                    lastTimestamp = timestamp;
                    shares = data[i].balance;
                }
            }
            return {name:symbol, data:transactions};
        }));
    });

    unpackPromisesAndUpdateSeries(promises);
  }


  function chartUpdate(){
    const selection = $('#timeselector').val();
    setChartTimeframe(selection);
  }

    function sumPricesAndUpdateBalance() {
        let sum = 0;
        
        symbols.forEach((symbol) => {
            const sharesOwned = parseFloat($(`#${symbol}-sharesOwned`).text());
            sum = sharesOwned * prices[symbol] + sum;
        });

        const newBalance = parseFloat((sum).toFixed(2));
        const formatter = Intl.NumberFormat(navigator.language, {style: 'currency', currency: 'USD'});
        $('#balance').text(formatter.format(newBalance));

        if (newBalance > lastBalance) {
            flashGreen('#balance', 'white');
        } else if(lastBalance > newBalance) {
            flashRed('#balance', 'white');
        }

        lastBalance = newBalance;
    }
    
    $(() => {
        chart.render()
        const socket = io();
        const assets = $('.price');
        
        for (let i=0; i < assets.length; i++) {
            let price = parseFloat(assets[i].textContent);
            assets[i].textContent = price.toFixed(2);
            let [symbol, _] = assets[i].id.split('-');
            symbols.push(symbol);
            prices[symbol] = price;
            sumPricesAndUpdateBalance();

            socket.on('updates.'+symbol, (data) => {
                assets[i].textContent = data.price.toFixed(2);
                let selector = `#${assets[i].id}`;

                if (data.price > prices[symbol]) {
                    flashGreen(selector, 'black');
                } else if (data.price < prices[symbol]) {
                    flashRed(selector, 'black');
                }

                prices[symbol] = data.price;
                sumPricesAndUpdateBalance();
            });
        }
        setChartTimeframe(0);
    });
</script>
{% endblock %}