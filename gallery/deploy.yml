---
platform: linux
image_resource:
  type: registry-image
  source:
    repository: taylorsilva/dcind
params: 
  PROJECT: ((gcp-sa))
  SA_AUTH_JSON: ((auth-gcp-sa))
  BASE_CONTAINER_AUTH: ((auth-gcp-te))
  GOOGLE_APPLICATION_CREDENTIALS: /tmp/auth.json
  WORKSPACE: redisfi-test
  NAME_SLUG: test.fi
  DNS_ZONE: exhibit
  DNS_STEM: exhibit.redis.gallery
  ALPACA_KEY:
  ALPACA_SECRET:
  YH_API_KEY:
  MOCK: 
  BASE_CONTAINER:
  SECRET: 
inputs:
  - name: redisfi
run:
  path: bash
  args:
    - -cex
    - |
      ## start docker - startup for env
      source /docker-lib.sh
      start_docker
      apk add jq
      export CLUSTER_PASS=${SECRET:0:12}

      ## install modules into cluster
      curl http://redismodules.s3.amazonaws.com/redisearch/redisearch.Linux-ubuntu18.04-x86_64.2.4.3.zip --output search.zip
      curl http://redismodules.s3.amazonaws.com/rejson/rejson.Linux-ubuntu18.04-x86_64.2.0.0.zip --output json.zip
      curl -k -u "admin@redis.com:$CLUSTER_PASS" -F "module=@search.zip" https://db-$NAME_SLUG.$DNS_STEM:9443/v1/modules
      curl -k -u "admin@redis.com:$CLUSTER_PASS" -F "module=@json.zip" https://db-$NAME_SLUG.$DNS_STEM:9443/v1/modules
      
      ## create db
      cd redisfi
      curl -sSL https://install.python-poetry.org | POETRY_VERSION=1.5.0 POETRY_HOME=/usr/local python3 -
      poetry install --no-dev
      poetry run redisfi-compose tool create_db -H db-$NAME_SLUG.$DNS_STEM -u admin@redis.com -p $CLUSTER_PASS -s 42949672960 -S 12
      
      ## get gcloud container up and authorized
      docker run -dt --name GC gcr.io/google.com/cloudsdktool/google-cloud-cli:latest
      echo $SA_AUTH_JSON > /tmp/auth.json
      chmod 400 /tmp/auth.json
      docker cp /tmp/auth.json GC:/tmp/auth.json 
      docker exec GC gcloud auth activate-service-account --key-file=/tmp/auth.json
      
      ## encode base container credentials for deployed app to use
      echo $BASE_CONTAINER_AUTH > /tmp/te-auth.json
      encodedCreds=$(base64 -w 0 /tmp/te-auth.json)

      ## deploy container and pull out the external IP
      createOutput=$(docker exec GC gcloud compute instances create $WORKSPACE-app --project=$PROJECT --zone=us-west4-a --image-family=redisfi --machine-type=e2-standard-8 --network=$WORKSPACE-vpc --subnet=$WORKSPACE-subnet --tags=allow-ssl --metadata=startup-script="cd /opt/redisfi && sudo poetry run redisfi-compose deploy $MOCK $NAME_SLUG.$DNS_STEM $ALPACA_KEY $ALPACA_SECRET $YH_API_KEY redis://redis-6379.int.db-$NAME_SLUG.$DNS_STEM:6379 $BASE_CONTAINER $encodedCreds" --format="json")
      appIP=$(echo $createOutput | jq -r .[0].networkInterfaces[0].accessConfigs[0].natIP)
      
      ## setup networking pieces - firewall and DNS
      docker exec GC gcloud compute --project=$PROJECT firewall-rules create $WORKSPACE-allow-ssl --direction=INGRESS --priority=1000 --network=$WORKSPACE-vpc --action=ALLOW --rules=tcp:443 --source-ranges=0.0.0.0/0 --target-tags=allow-ssl
      docker exec GC gcloud beta dns --project=$PROJECT record-sets transaction start --zone=$DNS_ZONE
      docker exec GC gcloud beta dns --project=$PROJECT record-sets transaction add $appIP --name="$NAME_SLUG.$DNS_STEM." --ttl="30" --type="A" --zone=$DNS_ZONE
      docker exec GC gcloud beta dns --project=$PROJECT record-sets transaction execute --zone=$DNS_ZONE